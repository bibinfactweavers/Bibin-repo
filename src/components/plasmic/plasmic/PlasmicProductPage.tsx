// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5PkZx9c7sM1bvoSfz3hwLh
// Component: lswmajmwr4
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic.module.css"; // plasmic-import: 5PkZx9c7sM1bvoSfz3hwLh/projectcss
import sty from "./PlasmicProductPage.module.css"; // plasmic-import: lswmajmwr4/css

export type PlasmicProductPage__VariantMembers = {};
export type PlasmicProductPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductPage__VariantsArgs;
export const PlasmicProductPage__VariantProps = new Array<VariantPropType>();

export type PlasmicProductPage__ArgsType = {};
type ArgPropType = keyof PlasmicProductPage__ArgsType;
export const PlasmicProductPage__ArgProps = new Array<ArgPropType>();

export type PlasmicProductPage__OverridesType = {
  root?: p.Flex<"div">;
  productCollection?: p.Flex<typeof ProductCollection>;
  productBox?: p.Flex<typeof ProductBox>;
};

export interface DefaultProductPageProps {
  className?: string;
}

function PlasmicProductPage__RenderFunc(props: {
  variants: PlasmicProductPage__VariantsArgs;
  args: PlasmicProductPage__ArgsType;
  overrides: PlasmicProductPage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <ProductCollection
            data-plasmic-name={"productCollection"}
            data-plasmic-override={overrides.productCollection}
            className={classNames("__wab_instance", sty.productCollection)}
            emptyMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e5XQh
                    )}
                  >
                    {"No product found!"}
                  </div>
                )}
              </ph.DataCtxReader>
            }
            loadingMessage={
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nkXdZ
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </ph.DataCtxReader>
            }
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div
                  className={classNames(projectcss.all, sty.freeBox___4Ftvc)}
                >
                  <ProductTextField
                    className={classNames(
                      "__wab_instance",
                      sty.productTextField__gzPpP
                    )}
                    field={"name" as const}
                  />

                  <ProductMedia
                    className={classNames(
                      "__wab_instance",
                      sty.productMedia__o7VCn
                    )}
                  />
                </div>
              )}
            </ph.DataCtxReader>
          </ProductCollection>

          <ProductBox
            data-plasmic-name={"productBox"}
            data-plasmic-override={overrides.productBox}
            className={classNames("__wab_instance", sty.productBox)}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__xQdAb)}>
                  <ProductTextField
                    className={classNames(
                      "__wab_instance",
                      sty.productTextField___5T7Ew
                    )}
                    field={"name" as const}
                  />

                  <ProductMedia
                    className={classNames(
                      "__wab_instance",
                      sty.productMedia__hBxM
                    )}
                  />
                </div>
              )}
            </ph.DataCtxReader>
          </ProductBox>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "productCollection", "productBox"],
  productCollection: ["productCollection"],
  productBox: ["productBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  productCollection: typeof ProductCollection;
  productBox: typeof ProductBox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductPage__VariantsArgs;
    args?: PlasmicProductPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductPage__ArgProps,
          internalVariantPropNames: PlasmicProductPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProductPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductPage";
  } else {
    func.displayName = `PlasmicProductPage.${nodeName}`;
  }
  return func;
}

export const PlasmicProductPage = Object.assign(
  // Top-level PlasmicProductPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productCollection: makeNodeComponent("productCollection"),
    productBox: makeNodeComponent("productBox"),

    // Metadata about props expected for PlasmicProductPage
    internalVariantProps: PlasmicProductPage__VariantProps,
    internalArgProps: PlasmicProductPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProductPage;
/* prettier-ignore-end */
